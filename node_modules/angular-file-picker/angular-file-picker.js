import { Directive, ElementRef, EventEmitter, HostListener, Input, NgModule, Output, Renderer2 } from '@angular/core';
import { CommonModule } from '@angular/common';

class PickedFileImpl {
    /**
     * @param {?} _lastModifiedDate
     * @param {?} _name
     * @param {?} _size
     * @param {?} _type
     * @param {?} _readMode
     * @param {?} _content
     */
    constructor(_lastModifiedDate, _name, _size, _type, _readMode, _content) {
        this._lastModifiedDate = _lastModifiedDate;
        this._name = _name;
        this._size = _size;
        this._type = _type;
        this._readMode = _readMode;
        this._content = _content;
    }
    /**
     * @return {?}
     */
    get lastModifiedDate() {
        return this._lastModifiedDate;
    }
    /**
     * @return {?}
     */
    get name() {
        return this._name;
    }
    /**
     * @return {?}
     */
    get size() {
        return this._size;
    }
    /**
     * @return {?}
     */
    get type() {
        return this._type;
    }
    /**
     * @return {?}
     */
    get readMode() {
        return this._readMode;
    }
    /**
     * @return {?}
     */
    get content() {
        return this._content;
    }
}

let ReadMode = {};
ReadMode.arrayBuffer = 0;
ReadMode.binaryString = 1;
ReadMode.dataURL = 2;
ReadMode.text = 3;
ReadMode[ReadMode.arrayBuffer] = "arrayBuffer";
ReadMode[ReadMode.binaryString] = "binaryString";
ReadMode[ReadMode.dataURL] = "dataURL";
ReadMode[ReadMode.text] = "text";

class FilePickerDirective {
    /**
     * @param {?} el
     * @param {?} renderer
     */
    constructor(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.accept = '';
        this.filePick = new EventEmitter();
        this.readStart = new EventEmitter();
        this.readEnd = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get multiple() { return this._multiple; }
    /**
     * @param {?} value
     * @return {?}
     */
    set multiple(value) { this._multiple = coerceBooleanProperty(value); }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.input = this.renderer.createElement('input');
        this.renderer.appendChild(this.el.nativeElement, this.input);
        this.renderer.setAttribute(this.input, 'type', 'file');
        this.renderer.setAttribute(this.input, 'accept', this.accept);
        this.renderer.setStyle(this.input, 'display', 'none');
        if (this.multiple) {
            this.renderer.setAttribute(this.input, 'multiple', 'multiple');
        }
        this.renderer.listen(this.input, 'change', (event) => {
            const /** @type {?} */ fileCount = event.target.files.length;
            this.readStart.emit(event.target.files.length);
            Promise.all(Array.from(event.target.files).map(file => this.readFile(file)))
                .then(() => this.readEnd.emit(fileCount));
        });
    }
    /**
     * @return {?}
     */
    reset() {
        if (!this.input) {
            console.error('It seems that ngOnInit() has not been executed or that the hidden input element is null. Did you mess with the DOM?');
            return;
        }
        this.input.value = null;
    }
    /**
     * @return {?}
     */
    browse() {
        if (!this.input) {
            console.error('It seems that ngOnInit() has not been executed or that the hidden input element is null. Did you mess with the DOM?');
            return;
        }
        this.input.click();
    }
    /**
     * @param {?} file
     * @return {?}
     */
    readFile(file) {
        return new Promise((resolve, reject) => {
            const /** @type {?} */ reader = new FileReader();
            reader.onload = (loaded) => {
                const /** @type {?} */ fileReader = (loaded.target);
                const /** @type {?} */ pickedFile = new PickedFileImpl(file.lastModifiedDate, file.name, file.size, file.type, this.readMode, fileReader.result);
                this.filePick.emit(pickedFile);
                resolve();
            };
            switch (this.readMode) {
                case ReadMode.arrayBuffer:
                    reader.readAsArrayBuffer(file);
                    break;
                case ReadMode.binaryString:
                    reader.readAsBinaryString(file);
                    break;
                case ReadMode.text:
                    reader.readAsText(file);
                    break;
                case ReadMode.dataURL:
                default:
                    reader.readAsDataURL(file);
                    break;
            }
        });
    }
}
FilePickerDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ngFilePicker]'
            },] },
];
/**
 * @nocollapse
 */
FilePickerDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
FilePickerDirective.propDecorators = {
    'accept': [{ type: Input },],
    'multiple': [{ type: Input },],
    'readMode': [{ type: Input, args: ['ngFilePicker',] },],
    'filePick': [{ type: Output },],
    'readStart': [{ type: Output },],
    'readEnd': [{ type: Output },],
    'browse': [{ type: HostListener, args: ['click',] },],
};
/**
 * @param {?} value
 * @return {?}
 */
function coerceBooleanProperty(value) {
    return value != null && `${value}` !== 'false';
}

class AngularFilePickerModule {
}
AngularFilePickerModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [FilePickerDirective],
                exports: [FilePickerDirective]
            },] },
];
/**
 * @nocollapse
 */
AngularFilePickerModule.ctorParameters = () => [];

/**
 * Generated bundle index. Do not edit.
 */

export { AngularFilePickerModule, ReadMode, FilePickerDirective as Éµa };
//# sourceMappingURL=angular-file-picker.js.map
