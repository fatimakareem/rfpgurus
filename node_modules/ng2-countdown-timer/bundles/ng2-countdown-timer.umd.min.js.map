{"version":3,"sources":["ng://ng2-countdown-timer/lib/countdown/countdown.component.ts","ng://ng2-countdown-timer/lib/countdown.module.ts"],"names":["CountdownComponent","_this","this","EventEmitter","setInterval","_displayString","prototype","wasReached","units","split","givenDate","Date","end","now","dateDifference","reached","next","i","unit","lastUnit","length","unitConstantForMillisecs","year","month","weeks","days","hours","minutes","seconds","unitsLeft","returnText","returnNumbers","totalMillisecsLeft","hasOwnProperty","trim","toLowerCase","Error","Math","ceil","floor","text","Year","Month","Weeks","Days","Hours","Minutes","Seconds","MilliSeconds","displayString","replace","displayNumbers","display","Component","args","selector","template","styles","Input","Output","CountdownModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"+UAAA,IAAAA,EAAA,WA+BE,SAAAA,IAAA,IAAAC,EAAAC,wBATiC,kBAGJ,eACW,IAAIC,EAAAA,0BAC7B,uBACO,oBACA,EAGpBC,YAAY,WAAM,OAAAH,EAAKI,kBAAkB,YAG3CL,EAAAM,UAAAD,eAAA,WACE,IAAIH,KAAKK,WAAT,CAG0B,iBAAfL,KAAKM,QACdN,KAAKM,MAAQN,KAAKM,MAAMC,MAAM,MAGhC,IAAIC,EAAiB,IAAIC,KAAKT,KAAKU,KAC/BC,EAAW,IAAIF,KACfG,EAAsBJ,EAAYG,GAEjCC,EAAiB,KAAwB,EAAjBA,GAAuBA,EAAiB,IAAMZ,KAAKK,cAC9EL,KAAKK,YAAa,EAClBL,KAAKa,QAAQC,KAAKH,IAGpB,IAcEI,EACAC,EAfEC,EAAWjB,KAAKM,MAAMN,KAAKM,MAAMY,OAAS,GAC5CC,EAA2B,CACzBC,KAAI,SACJC,MAAK,QACLC,MAAK,OACLC,KAAI,MACJC,MAAK,KACLC,QAAO,IACPC,QAAS,KAEXC,EAAY,GACZC,EAAa,GACbC,EAAgB,GAChBC,EAAqBlB,EAIvB,IAAKG,KAAKf,KAAKM,MACb,GAAIN,KAAKM,MAAMyB,eAAehB,GAAI,CAGhC,IAAqD,IAAjDI,GADJH,EAAOhB,KAAKM,MAAMS,GAAGiB,QACaC,eAEhC,MAAM,IAAIC,MAAM,uBAAyBlB,GAG3C,IAAoE,IAAhEG,EAAyBY,eAAef,EAAKiB,eAC/C,MAAM,IAAIC,MAAM,SAAWlB,EAAO,kHAIpCW,EAAUX,GAAShB,KAAe,WAAI,EAAI8B,EAAqBX,EAAyBH,EAAKiB,eAG3FN,EAAUX,GADRC,IAAaD,EACGmB,KAAKC,KAAKT,EAAUX,IAEpBmB,KAAKE,MAAMV,EAAUX,IAGzCc,GAAsBH,EAAUX,GAAQG,EAAyBH,EAAKiB,eACtEd,EAAyBH,EAAKiB,gBAAiB,EAG/CN,EAAUX,GAA2B,EAAlBW,EAAUX,GAAaW,EAAUX,GAAQ,EAE5Da,GAAiB,IAAMF,EAAUX,GAAQ,MACzCY,GAAc,IAAMZ,EAIN,OAAdhB,KAAKsC,MAAkBtC,KAAKsC,OAC9BtC,KAAKsC,KAAO,CACVC,KAAM,OACNC,MAAO,QACPC,MAAO,QACPC,KAAM,OACNC,MAAO,QACPC,QAAS,UACTC,QAAS,UACTC,aAAc,iBAIlB9C,KAAK+C,cAAgBnB,EAClBoB,QAAQ,OAAQhD,KAAKsC,KAAKC,KAAO,OACjCS,QAAQ,QAAShD,KAAKsC,KAAKE,MAAQ,OACnCQ,QAAQ,QAAShD,KAAKsC,KAAKG,MAAQ,OACnCO,QAAQ,OAAQhD,KAAKsC,KAAKI,KAAO,OACjCM,QAAQ,QAAShD,KAAKsC,KAAKK,MAAQ,OACnCK,QAAQ,UAAWhD,KAAKsC,KAAKM,QAAU,OACvCI,QAAQ,UAAWhD,KAAKsC,KAAKO,SAEhC7C,KAAKiD,eAAiBpB,EAActB,MAAM,KAC1CP,KAAKkD,QAAUlD,KAAK+C,cAAcxC,MAAM,2BA3H3C4C,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,YACVC,SAAU,mbAYVC,OAAQ,CAAC,2SAIRC,EAAAA,mBACAA,EAAAA,6BACAA,EAAAA,oBACAA,EAAAA,uBACAA,EAAAA,wBACAA,EAAAA,uBACAC,EAAAA,YA1BH,GCAAC,EAAA,oDAICC,EAAAA,SAAQP,KAAA,CAAC,CACRQ,QAAS,CAACC,EAAAA,cACVC,aAAc,CACZhE,GAEFiE,QAAS,CACPjE,SAVJ","sourcesContent":["import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'countdown',\r\n  template: `<div class=\"countdown\">\r\n  <div *ngFor=\"let time of display; let i = index\" class=\"measurements {{time}}\">\r\n    <p class=\"measurements-number\">\r\n      {{ (showZero && displayNumbers[i] < 10) ? '0' + displayNumbers[i].trim() : displayNumbers[i]}}\r\n    </p>\r\n    <span *ngIf=\"display[i+1]\" class=\"divider\"> {{divider}} </span>\r\n    <p class=\"measurements-text\">\r\n      {{time}}\r\n    </p>\r\n  </div>\r\n</div>\r\n<ng-content></ng-content>`,\r\n  styles: [`.countdown{display:flex;align-items:center;justify-content:center;align-content:center;font-family:\"Helvetica Neue\",Helvetica,Arial,sans-serif}.countdown .measurements{flex:.1}.countdown .measurements .divider{float:right}`]\r\n})\r\nexport class CountdownComponent {\r\n\r\n  @Input() units: any;\r\n  @Input() end: any;\r\n  @Input() displayString: String = '';\r\n  @Input() text: any;\r\n  @Input() divider: any;\r\n  @Input() showZero: Boolean = false;\r\n  @Output() reached: EventEmitter<Date> = new EventEmitter();\r\n  display: any = [];\r\n  displayNumbers: any = [];\r\n  wasReached: Boolean = false;\r\n\r\n  constructor() {\r\n    setInterval(() => this._displayString(), 100);\r\n  }\r\n\r\n  _displayString() {\r\n    if (this.wasReached)\r\n      return;\r\n\r\n    if (typeof this.units === 'string') {\r\n      this.units = this.units.split('|');\r\n    }\r\n\r\n    let givenDate: any = new Date(this.end);\r\n    let now: any = new Date();\r\n    let dateDifference: any = givenDate - now;\r\n\r\n    if ((dateDifference < 100 && dateDifference > 0) || dateDifference < 0 && !this.wasReached) {\r\n      this.wasReached = true;\r\n      this.reached.next(now);\r\n    }\r\n\r\n    let lastUnit = this.units[this.units.length - 1],\r\n      unitConstantForMillisecs = {\r\n        year: (((1000 * 60 * 60 * 24 * 7) * 4) * 12),\r\n        month: ((1000 * 60 * 60 * 24 * 7) * 4),\r\n        weeks: (1000 * 60 * 60 * 24 * 7),\r\n        days: (1000 * 60 * 60 * 24),\r\n        hours: (1000 * 60 * 60),\r\n        minutes: (1000 * 60),\r\n        seconds: 1000\r\n      },\r\n      unitsLeft = {},\r\n      returnText = '',\r\n      returnNumbers = '',\r\n      totalMillisecsLeft = dateDifference,\r\n      i,\r\n      unit: any;\r\n\r\n    for (i in this.units) {\r\n      if (this.units.hasOwnProperty(i)) {\r\n\r\n        unit = this.units[i].trim();\r\n        if (unitConstantForMillisecs[unit.toLowerCase()] === false) {\r\n          //$interval.cancel(countDownInterval);\r\n          throw new Error('Cannot repeat unit: ' + unit);\r\n\r\n        }\r\n        if (unitConstantForMillisecs.hasOwnProperty(unit.toLowerCase()) === false) {\r\n          throw new Error('Unit: ' + unit + ' is not supported. Please use following units: year, month, weeks, days, hours, minutes, seconds, milliseconds');\r\n        }\r\n\r\n        // If it was reached, everything is zero\r\n        unitsLeft[unit] = (this.wasReached) ? 0 : totalMillisecsLeft / unitConstantForMillisecs[unit.toLowerCase()];\r\n\r\n        if (lastUnit === unit) {\r\n          unitsLeft[unit] = Math.ceil(unitsLeft[unit]);\r\n        } else {\r\n          unitsLeft[unit] = Math.floor(unitsLeft[unit]);\r\n        }\r\n\r\n        totalMillisecsLeft -= unitsLeft[unit] * unitConstantForMillisecs[unit.toLowerCase()];\r\n        unitConstantForMillisecs[unit.toLowerCase()] = false;\r\n\r\n        // If it's less than 0, round to 0\r\n        unitsLeft[unit] = (unitsLeft[unit] > 0) ? unitsLeft[unit] : 0;\r\n\r\n        returnNumbers += ' ' + unitsLeft[unit] + ' | ';\r\n        returnText += ' ' + unit;\r\n      }\r\n    }\r\n\r\n    if (this.text === null || !this.text) {\r\n      this.text = {\r\n        Year: 'Year',\r\n        Month: 'Month',\r\n        Weeks: 'Weeks',\r\n        Days: 'Days',\r\n        Hours: 'Hours',\r\n        Minutes: 'Minutes',\r\n        Seconds: 'Seconds',\r\n        MilliSeconds: 'Milliseconds'\r\n      };\r\n    }\r\n\r\n    this.displayString = returnText\r\n      .replace('Year', this.text.Year + ' | ')\r\n      .replace('Month', this.text.Month + ' | ')\r\n      .replace('Weeks', this.text.Weeks + ' | ')\r\n      .replace('Days', this.text.Days + ' | ')\r\n      .replace('Hours', this.text.Hours + ' | ')\r\n      .replace('Minutes', this.text.Minutes + ' | ')\r\n      .replace('Seconds', this.text.Seconds);\r\n\r\n    this.displayNumbers = returnNumbers.split('|');\r\n    this.display = this.displayString.split('|');\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';  \r\nimport { CountdownComponent } from './countdown/countdown.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [\r\n    CountdownComponent\r\n  ],\r\n  exports: [\r\n    CountdownComponent,\r\n  ]\r\n})\r\nexport class CountdownModule { }\r\n"]}