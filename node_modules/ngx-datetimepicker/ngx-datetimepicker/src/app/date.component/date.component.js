var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, Input, Output, EventEmitter, ElementRef, ViewChild, ViewEncapsulation } from '@angular/core';
import { DateService } from '../services/date.service';
export var DateComponent = (function () {
    function DateComponent(dateService) {
        this.dateService = dateService;
        this.selectedDateChange = new EventEmitter();
        this.closeDatePicker = new EventEmitter();
        this.showMonthSelection = false;
        this.showYearSelection = false;
    }
    Object.defineProperty(DateComponent.prototype, "selectedMonth", {
        get: function () {
            //increment by one since getMonth is zero based
            return this.selectedDate.getMonth() + 1;
        },
        set: function (month) {
            var newDate = new Date(this.selectedDate);
            newDate.setMonth(month - 1);
            this.loadCalendarMonth(newDate);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateComponent.prototype, "selectedDay", {
        get: function () {
            return this.selectedDate.getDate();
        },
        set: function (day) {
            var newDate = new Date(this.selectedDate);
            newDate.setDate(day);
            this.loadCalendarMonth(newDate);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateComponent.prototype, "selectedYear", {
        get: function () {
            return this.selectedDate.getFullYear();
        },
        set: function (year) {
            var newDate = new Date(this.selectedDate);
            newDate.setFullYear(year);
            this.loadCalendarMonth(newDate);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateComponent.prototype, "selectedMonthText", {
        get: function () {
            return this.dateService.getMonthText(this.selectedDate);
        },
        enumerable: true,
        configurable: true
    });
    DateComponent.prototype.setSelectedDate = function (date, hour, minutes) {
        if (this.includeTime && !!date) {
            date.setHours(this.selectedDate.getHours(), this.selectedDate.getMinutes());
        }
        if (!date) {
            date = new Date();
        }
        //load calendarMonth will set the selected date;
        this.loadCalendarMonth(date);
        if (hour != null) {
            this.selectedDate.setHours(hour);
        }
        if (minutes != null) {
            this.selectedDate.setMinutes(minutes);
        }
        this.selectedDateChange.emit(this.selectedDate);
        this.highlightedDate = this.selectedDate;
        this.selectedHour = date.getHours();
        this.selectedMinute = date.getMinutes();
        this.closePicker();
    };
    DateComponent.prototype.loadCalendarMonth = function (date) {
        var shouldReloadCalendar = (this.selectedMonth != (date.getMonth() + 1) || this.selectedYear != date.getFullYear());
        this.selectedDate = date;
        if (shouldReloadCalendar) {
            this.availableDays = this.dateService.getDateList(this.selectedMonth, this.selectedYear).slice();
        }
    };
    DateComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.months = this.dateService.getMonths();
        this.years = this.dateService.getAvailableYears();
        // subscribing to it's own event emitter to set the selected year position
        this.selectedDateChange.subscribe(function (date) {
            _this.scrollToMonth();
            _this.scrollToYear();
        });
        //If no date is selected then default to today's date.
        if (!this.selectedDate) {
            this.selectedDate = new Date();
        }
        if (typeof this.selectedDate == 'string') {
            this.selectedDate = new Date(this.selectedDate);
        }
        if (this.includeTime) {
            this.selectedHour = this.selectedDate.getHours();
        }
        if (this.includeTime) {
            this.selectedMinute = this.selectedDate.getMinutes();
        }
        this.highlightedDate = this.selectedDate;
        this.availableDays = this.dateService.getDateList(this.selectedMonth, this.selectedYear).slice();
    };
    DateComponent.prototype.scrollToYear = function () {
        var _this = this;
        // setTime out is being used since I need this code to excute next, if not the change won't be visible until the second click
        setTimeout(function () {
            if (_this.yearSelect && _this.yearSelect.nativeElement) {
                var selectContainer = _this.yearSelect.nativeElement;
                var selectedYear = selectContainer.querySelector('.calendar--year__selected');
                selectContainer.scrollTop = selectedYear.offsetTop - (selectContainer.clientHeight / 2) - (selectedYear.clientHeight);
            }
        });
    };
    DateComponent.prototype.scrollToMonth = function () {
        var _this = this;
        // setTime out is being used since I need this code to excute next, if not the change won't be visible until the second click
        setTimeout(function () {
            if (_this.monthSelect && _this.monthSelect.nativeElement) {
                var selectContainer = _this.monthSelect.nativeElement;
                var selectedMonth = selectContainer.querySelector('.calendar--month__selected');
                selectContainer.scrollTop = selectedMonth.offsetTop - (selectContainer.clientHeight / 2) - (selectedMonth.clientHeight);
            }
        });
    };
    DateComponent.prototype.previousMonth = function () {
        var previousMonth = new Date(this.selectedDate);
        //because javascript sets months based on a 0 index need to jump back 2 to go to the previous month.
        previousMonth.setMonth(this.selectedMonth - 2);
        this.loadCalendarMonth(previousMonth);
    };
    DateComponent.prototype.nextMonth = function () {
        var nextMonth = new Date(this.selectedDate);
        /// same as above but since selected month is 1-12 the index is already the next month.
        nextMonth.setMonth(this.selectedMonth);
        this.loadCalendarMonth(nextMonth);
    };
    DateComponent.prototype.toggleMonthMenu = function () {
        this.scrollToMonth();
        this.showMonthSelection = !this.showMonthSelection;
    };
    DateComponent.prototype.toggleYearMenu = function () {
        this.scrollToYear();
        this.showYearSelection = !this.showYearSelection;
    };
    DateComponent.prototype.closePicker = function () {
        this.closeDatePicker.emit(false);
    };
    __decorate([
        Input(), 
        __metadata('design:type', Date)
    ], DateComponent.prototype, "selectedDate", void 0);
    __decorate([
        Input(), 
        __metadata('design:type', Boolean)
    ], DateComponent.prototype, "includeTime", void 0);
    __decorate([
        Output(), 
        __metadata('design:type', Object)
    ], DateComponent.prototype, "selectedDateChange", void 0);
    __decorate([
        Output(), 
        __metadata('design:type', Object)
    ], DateComponent.prototype, "closeDatePicker", void 0);
    __decorate([
        ViewChild('yearSelect'), 
        __metadata('design:type', ElementRef)
    ], DateComponent.prototype, "yearSelect", void 0);
    __decorate([
        ViewChild('monthSelect'), 
        __metadata('design:type', ElementRef)
    ], DateComponent.prototype, "monthSelect", void 0);
    DateComponent = __decorate([
        Component({
            selector: 'ngx-date',
            templateUrl: './date.component.html',
            encapsulation: ViewEncapsulation.None
        }), 
        __metadata('design:paramtypes', [DateService])
    ], DateComponent);
    return DateComponent;
}());
//# sourceMappingURL=C:/Code/ngx-datetimepicker/ngx-datetimepicker/src/app/date.component/date.component.js.map