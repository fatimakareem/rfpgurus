var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from '@angular/core';
export var DateService = (function () {
    function DateService() {
        this.months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
    }
    DateService.prototype.formatMMDDYYYY = function (date) {
        if (!date || typeof date == 'string') {
            return '';
        }
        return (date.getMonth() + 1) + "/" + date.getDate() + "/" + date.getFullYear();
    };
    DateService.prototype.formatMMDDYYYY_HHMM_AMPM = function (date) {
        if (!date || typeof date == 'string') {
            return '';
        }
        var hours = date.getHours();
        var minutes = date.getMinutes();
        return this.formatMMDDYYYY(date) + " " + this.formatHHMM_AMPM(hours, minutes);
    };
    DateService.prototype.formatHHMM_AMPM = function (hour, minute) {
        var formattedMinute = (!minute ? '00' : (minute <= 9 ? "0" + minute : minute));
        if (hour > 12) {
            return (hour - 12) + ":" + formattedMinute + " pm";
        }
        if (hour == 12) {
            return "12:" + formattedMinute + " pm";
        }
        if (hour == 0) {
            return "12:" + formattedMinute + " am";
        }
        return hour + ":" + formattedMinute + " am";
    };
    DateService.prototype.getCurrentMonthDays = function (month, year) {
        var dayOfTheMonth = new Date(year, month - 1, 1);
        var nextMonth = new Date(year, month - 1, 1);
        var returnedDays = [];
        nextMonth.setMonth(nextMonth.getMonth() + 1);
        while (dayOfTheMonth.getMonth() != nextMonth.getMonth()) {
            var dayToAdd = {
                day: dayOfTheMonth.getDate(),
                dayOfTheWeek: dayOfTheMonth.getDay(),
                month: dayOfTheMonth.getMonth() + 1,
                date: new Date((dayOfTheMonth.getMonth() + 1) + '/' + dayOfTheMonth.getDate() + '/' + dayOfTheMonth.getFullYear())
            };
            returnedDays.push(dayToAdd);
            dayOfTheMonth.setDate(dayOfTheMonth.getDate() + 1);
        }
        return returnedDays;
    };
    DateService.prototype.getDateList = function (Month, Year) {
        return this.getPreviousMonthDays(Month, Year).concat(this.getCurrentMonthDays(Month, Year), this.getNextMonthDays(Month, Year));
    };
    DateService.prototype.getPreviousMonthDays = function (Month, Year) {
        var day = new Date(Month + '/1/' + Year);
        var returnedDays = [];
        var dayOfTheWeek = day.getDay();
        while (dayOfTheWeek != 0) {
            day.setDate(day.getDate() - 1);
            returnedDays = [{
                day: day.getDate(),
                dayOfTheWeek: day.getDay(),
                month: day.getMonth() + 1,
                date: new Date((day.getMonth() + 1) + '/' + day.getDate() + '/' + day.getFullYear())
            }].concat(returnedDays);
            dayOfTheWeek = day.getDay();
        }
        return returnedDays;
    };
    DateService.prototype.getNextMonthDays = function (Month, Year) {
        var day = new Date(Month + '/1/' + Year);
        day.setMonth(day.getMonth() + 1);
        day.setDate(day.getDate() - 1);
        var returnedDays = [];
        var dayOfTheWeek = day.getDay();
        while (dayOfTheWeek != 6) {
            day.setDate(day.getDate() + 1);
            returnedDays = returnedDays.concat([{
                day: day.getDate(),
                dayOfTheWeek: day.getDay(),
                month: day.getMonth() + 1,
                date: new Date((day.getMonth() + 1) + '/' + day.getDate() + '/' + day.getFullYear())
            }]);
            dayOfTheWeek = day.getDay();
        }
        return returnedDays;
    };
    DateService.prototype.getMonths = function () {
        return this.months;
    };
    DateService.prototype.getMonthText = function (date) {
        return this.months[date.getMonth()];
    };
    DateService.prototype.getAvailableYears = function () {
        var currentYear = new Date().getFullYear();
        var startYear = currentYear - 80;
        var returnYears = [];
        while (startYear <= (currentYear + 5)) {
            returnYears.push(startYear);
            startYear = startYear + 1;
        }
        return returnYears;
    };
    DateService = __decorate([
        Injectable(), 
        __metadata('design:paramtypes', [])
    ], DateService);
    return DateService;
}());
//# sourceMappingURL=C:/Code/ngx-datetimepicker/ngx-datetimepicker/src/app/services/date.service.js.map